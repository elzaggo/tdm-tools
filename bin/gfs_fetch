#!/usr/bin/env python

import sys
import os
import argparse
from tdm.gfs.noaa import noaa_fetcher
from tdm import VERSION as version

from datetime import datetime

NOW = datetime.now()


def make_parser():
    parser = argparse.ArgumentParser(
        description="Fetch GFS files from a remote production service",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('-V', '--version', action='version', version=version,
                        help='print version number and exit')
    parser.add_argument(
        '--year', metavar='INT', type=int,
        default=NOW.year,
        help="Requested year, defaults to current year"
    )
    parser.add_argument(
        '--month', metavar='INT', type=int,
        default=NOW.month,
        help="Requested month, defaults to current month"
    )
    parser.add_argument(
        '--day', metavar='INT', type=int,
        default=NOW.day,
        help="Requested day, defaults to today"
    )
    parser.add_argument(
        '--hour', metavar='INT', type=int,
        default=0,
        help="Requested hour, defaults to 0"
    )
    parser.add_argument(
        '--n-download-threads', metavar='INT', type=int,
        default=10,
        help="Number of parallel download threads, defaults to 10"
    )
    parser.add_argument(
        '--target-directory', metavar='DIR', type=str, default='./GFS_FETCHED',
        help="directory where the dataset should be downloaded"
    )
    parser.add_argument(
        '--requested-resolution', metavar='RESOLUTION',
        type=str, default='0p50',
        help="Requested resolution in fraction of degree. Defaults to '0p50'"
    )
    return parser


def main(argv):
    parser = make_parser()
    args, unknown = parser.parse_known_args(argv)
    nf = noaa_fetcher(args.year, args.month, args.day, args.hour)
    os.mkdir(args.target_directory)
    nf.fetch(args.requested_resolution, args.target_directory,
             nthreads=args.n_download_threads)


main(sys.argv)

#!/usr/bin/env python

import sys
import os
import argparse
import yaml
from tdm.wrf import configurator
from tdm import VERSION as version


from datetime import datetime

NOW = datetime.now()

SUPPORTED_TARGETS = ['WPS', 'WRF']


def is_int(s):
    try:
        int(s)
        return True
    except ValueError:
        return False


def is_float(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


def kv_pair(s):
    try:
        k, v = s.split("=", 1)
    except ValueError:
        raise argparse.ArgumentTypeError("arg must be in the k=v form")
    v = int(v) if is_int(v) else float(v) if is_float(v) else v
    return k, v


class UpdateMap(argparse.Action):
    """\
    Update the destination map with a K=V pair.

    >>> parser = argparse.ArgumentParser()
    >>> _ = parser.add_argument("-D", metavar="K=V", action=UpdateMap)
    >>> args = parser.parse_args(["-D", "k1=v1", "-D", "k2=v2", "-D", "k2=v3"])
    >>> args.D == {'k1': 'v1', 'k2': 'v3'}
    True
    """

    def __init__(self, option_strings, dest, **kwargs):
        kwargs = {k: v for k, v in kwargs.items() if k in {"help", "metavar"}}
        kwargs["type"] = kv_pair
        super(UpdateMap, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        if getattr(namespace, self.dest, None) is None:
            setattr(namespace, self.dest, {})
        getattr(namespace, self.dest).update([values])


def make_parser():
    parser = argparse.ArgumentParser(
        description="Prepare WRF configuration files",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('-V', '--version', action='version',
                        version=version,
                        help='print version number and exit')
    parser.add_argument(
        '--target', metavar="|".join(SUPPORTED_TARGETS),
        choices=SUPPORTED_TARGETS, default='WPS')
    parser.add_argument('--config',
                        type=argparse.FileType('r', encoding='UTF-8'))
    parser.add_argument('--ofile',
                        type=argparse.FileType('w', encoding='UTF-8'))
    parser.add_argument('-D', metavar='K=V', action=UpdateMap)
    return parser


def generate_header(target):
    now = datetime.utcnow()
    header = """
# WRF CONFIGURATOR V{} {}
# {}
""".format(version, target, now.strftime("%Y-%m-%d_%H:%M:%Sz"))
    return header


def write_wps(config, ostream):
    ostream.write(generate_header('WPS'))
    ostream.write(config.generate_share())
    ostream.write(config.generate_geogrid())
    ostream.write(config.generate_ungrib())
    ostream.write(config.generate_metgrid())


def main(argv):
    parser = make_parser()
    args, unknown = parser.parse_known_args(argv)
    config = configurator.make(yaml.load(args.config.read()))
    if args.D:
        config.update(args.D)
    if args.target == 'WPS':
        write_wps(config, args.ofile)
    print(config.conf)
    for dn, v in config.domains.items():
        print(dn, v)


if __name__ == "__main__":
    main(sys.argv)

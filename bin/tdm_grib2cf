#!/usr/bin/env python

"""\
Convert a sequence of grib2 files to a single NetCDF4 dataset using the
NetCDF Climate and Forecast (CF) Metadata Conventions
(http://cfconventions.org) Version 1.6.
"""

import argparse
import os
import sys
import cdo
import subprocess
import shutil
import tempfile


def get_files(files_dir, ext):
    files = []
    for name in os.listdir(files_dir):
        if not name.endswith(ext):
            continue
        files.append(os.path.join(files_dir, name))
    return files


def convert_to_nc(gribs, writable_dir):
    ncs_dir = tempfile.mkdtemp(dir=writable_dir)
    for g in gribs:
        nc = os.path.join(ncs_dir,
                          os.path.splitext(os.path.basename(g))[0] + '.nc')
        subprocess.run(["wgrib2", g, '-netcdf', nc])
    return ncs_dir


def concatenate(ncs_dir, output_nc):
    ncs = sorted(get_files(ncs_dir, '.nc'))
    c = cdo.Cdo()
    c.cat(input=' '.join(ncs), output=output_nc,  options='-r -f nc')


def annotate(ncfile, annotations):
    pass


def main(args):
    gribs = get_files(args.input, '.grib2')
    print("'%s': %d files" % (args.input, len(gribs)))
    if not gribs:
        sys.exit("no files selected, aborting")
    try:
        os.makedirs(args.output)
    except FileExistsError:
        pass
    ncs_dir = convert_to_nc(gribs, args.output)
    if args.product_class and args.name:
        tag = '{}_{}_{}.nc'.format(args.product_class, args.name,
                                   args.instance_uid)
    else:
        tag = os.path.basename(args.input)
    out_fn = os.path.join(args.output, "%s.nc" % tag)
    concatenate(ncs_dir, out_fn)
    shutil.rmtree(ncs_dir)
    annotations = {'product': 'meteosim',
                   'product_class': args.product_class,
                   'uid': args.instance_uid}
    annotate(out_fn, annotations)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-i', '--input', metavar="DIR", default=".")
    parser.add_argument('-o', '--output', metavar="DIR", default=".")
    parser.add_argument("--product-group", metavar="PRODUCT_GROUP",
                        help="e.g., meteosim", default='meteosim')
    parser.add_argument("--product-class", metavar="PRODUCT_CLASS",
                        help="e.g., moloch")
    parser.add_argument('--name', metavar="STRING")
    parser.add_argument("--instance-uid", metavar="UID",
                        help="an unique identifier for this dataset")
    main(parser.parse_args(sys.argv[1:]))

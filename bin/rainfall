#!/usr/bin/env python

"""\
Estimate rainfall from radar output images and store results into NetCDF4
datasets, using the NetCDF Climate and Forecast (CF) Metadata Conventions
(http://cfconventions.org) Version 1.7.
"""

from netCDF4 import Dataset
import argparse
import datetime
import imageio
import os
import sys

from tdm.radar import utils

strftime = datetime.datetime.strftime

GLOBAL_ATTRIBUTES = {
    "Conventions": "CF-1.7",
    "title": "Rainfall",
    "institution": "TDM",
    "source": "Radar",
    "references": "http://www.tdm-project.it",
    "history": "Estimated with https://github.com/tdm-project/tdm-tools"
}

TIME_UNIT_FMT = "%Y-%m-%d %H:%M:%S"
T_CHUNKS = 30


def get_image_data(path):
    im = imageio.imread(path)
    return im[:, :, 0], im[:, :, 3] == 255  # signal, mask


def setncattr(dataset, attrs):
    for k, v in attrs.items():
        dataset.setncattr(k, v)


# CF conventions, sections 4.4 & 5.1
# See also: https://code.mpimet.mpg.de/boards/1/topics/5765
def create_variables(dataset, cols, rows, dts, t_chunks=T_CHUNKS):
    timed = dataset.createDimension("time", len(dts))
    xd = dataset.createDimension("x", cols)
    yd = dataset.createDimension("y", rows)
    t = dataset.createVariable("time", "f4", (timed.name,), fill_value=False)
    setncattr(t, {
        "long_name": "time",
        "standard_name": "time",
        "units": "seconds since %s" % strftime(dts[0], TIME_UNIT_FMT)
    })
    x = dataset.createVariable("x", "f4", (xd.name,), fill_value=False)
    setncattr(x, {
        "long_name": "x coordinate of projection",
        "standard_name": "projection_x_coordinate",
        "units": "m"
    })
    y = dataset.createVariable("y", "f4", (yd.name,), fill_value=False)
    setncattr(y, {
        "long_name": "y coordinate of projection",
        "standard_name": "projection_y_coordinate",
        "units": "m"
    })
    lat = dataset.createVariable(
        "lat", "f4", (xd.name, yd.name), fill_value=False
    )
    setncattr(lat, {
        "long_name": "latitude coordinate",
        "standard_name": "latitude",
        "units": "degrees_north"
    })
    lon = dataset.createVariable(
        "lon", "f4", (xd.name, yd.name), fill_value=False
    )
    setncattr(lon, {
        "long_name": "longitude coordinate",
        "standard_name": "longitude",
        "units": "degrees_east"
    })
    rf_rate = dataset.createVariable(
        "rainfall_rate", "f4", (timed.name, xd.name, yd.name),
        fill_value=-1.0, zlib=True, least_significant_digit=4,
        chunksizes=(t_chunks, cols, rows)
    )
    rf_rate.set_var_chunk_cache(t_chunks * rows * cols * 4, 5, 1.0)
    setncattr(rf_rate, {
        'long_name': 'estimated rainfall rate',
        'standard_name': 'rainfall_rate',
        'coordinates': 'lat lon',
        'grid_mapping': 'crs',
        'units': 'mm/hour'
    })
    return t, x, y, lat, lon, rf_rate


# CF conventions, section 5.6.1. TODO: derive attributes from the wkt
def attach_crs(dataset, wkt):
    crs = dataset.createVariable('crs', 'i4')  # dummy scalar (anchor)
    setncattr(crs, {
        'grid_mapping_name': 'transverse_mercator',
        'longitude_of_central_meridian': 9.0,
        'latitude_of_projection_origin': 0.0,
        'false_easting': 1500000.0,
        'false_northing': 0.0,
        'scale_factor_at_central_meridian': 0.9996,
        'semi_major_axis': 6378388.0,
        'inverse_flattening': 297,
        'projected_coordinate_system_name':
            'EPSG:3003 Monte Mario / Italy zone 1',
        'geographic_coordinate_system_name': 'Monte Mario',
        'horizontal_datum_name':  'Monte_Mario',
        'reference_ellipsoid_name': 'International 1924',
        'prime_meridian_name': "Greenwich",
        'towgs84': [-104.1, -49.1, -9.9, 0.971, -2.917, 0.714, -11.68],
        'crs_wkt': wkt
    })


def main(args):
    try:
        os.makedirs(args.out_dir)
    except FileExistsError:
        pass
    ga = utils.GeoAdapter(args.footprint)
    xpos, ypos = ga.xpos(), ga.ypos()
    lat_, lon_ = utils.get_lat_lon(ga.sr, xpos, ypos)
    all_dts, all_names = zip(*utils.get_images(args.img_dir))
    for dts, names in utils.events(all_dts, all_names, min_len=args.min_len):
        start = strftime(dts[0], utils.FMT)
        stop = strftime(dts[-1], utils.FMT)
        path = os.path.join(args.out_dir, "%s.nc" % start)
        print("saving %s (%d timepoints, until %s)" % (path, len(dts), stop))
        try:
            os.unlink(path)
        except FileNotFoundError:
            pass
        ds = Dataset(path, "w")
        ds.set_auto_mask(False)
        ds.set_always_mask(False)
        setncattr(ds, GLOBAL_ATTRIBUTES)
        t, x, y, lat, lon, rf_rate = create_variables(
            ds, ga.cols, ga.rows, dts, t_chunks=args.t_chunks
        )
        attach_crs(ds, ga.wkt)
        t[:] = [(_ - dts[0]).total_seconds() for _ in dts]
        x[:], y[:], lat[:], lon[:] = xpos, ypos, lat_, lon_
        fill_value = rf_rate._FillValue
        print("  0/%d" % len(names))
        for i, name in enumerate(names):
            if ((i + 1) % 100 == 0):
                print("  %d/%d" % (i + 1, len(names)))
            signal, mask = get_image_data(os.path.join(args.img_dir, name))
            rainfall = utils.estimate_rainfall(signal, mask)
            rainfall[mask == 0] = fill_value
            rf_rate[i, :, :] = rainfall
        ds.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("img_dir", metavar="PNG_IMG_DIR")
    parser.add_argument("footprint", metavar="GEOTIFF_FOOTPRINT")
    parser.add_argument("-l", "--min-len", metavar="SECONDS", type=int,
                        default=utils.MIN_EVENT_LEN,
                        help="skip events shorter than this")
    parser.add_argument("-o", "--out-dir", metavar="DIR", default=os.getcwd())
    parser.add_argument("--t-chunks", metavar="N", type=int, default=T_CHUNKS,
                        help="chunk size along the t dimension")
    main(parser.parse_args(sys.argv[1:]))

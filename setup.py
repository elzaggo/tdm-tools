from distutils.command.build import build
from distutils.core import setup
from distutils.dep_util import newer
from distutils.errors import DistutilsSetupError

VERSION_FILE = 'VERSION'
PY_VERSION_FILE = 'tdm/version.py'


def get_version():
    try:
        with open(VERSION_FILE) as f:
            return f.read().strip()
    except OSError:
        raise DistutilsSetupError('failed to read version string')


class Build(build):

    def run(self):
        if newer(VERSION_FILE, PY_VERSION_FILE):
            with open(PY_VERSION_FILE, 'w') as f:
                f.write('# GENERATED BY setup.py\n\n')
                f.write(f"VERSION = '{get_version()}'\n")
        build.run(self)


setup(
    name='tdm',
    version=get_version(),
    url='https://github.com/tdm-project/tdm-tools',
    description='TDM Tools - http://www.tdm-project.it/en/',
    author=', '.join((
        'Simone Leo',
        'Gianluigi Zanetti',
    )),
    author_email=', '.join((
        '<simone.leo@crs4.it>',
        '<gianluigi.zanetti@crs4.it>',
    )),
    license='MIT',
    classifiers=[
        'Programming Language :: Python :: 3.6',
        'License :: OSI Approved :: MIT License',
        'Operating System :: POSIX :: Linux',
        'Topic :: Scientific/Engineering :: Atmospheric Science',
        'Intended Audience :: Science/Research',
    ],
    packages=['tdm', 'tdm.gfs', 'tdm.gfs.noaa', 'tdm.radar', 'tdm.wrf'],
    scripts=[
        'bin/tdm_gfs_fetch',
        'bin/tdm_link_grib',
        'bin/tdm_map_to_lonlat',
        'bin/tdm_map_to_tree',
        'bin/tdm_radar_events',
        'bin/tdm_radar_nc_to_geo',
        'bin/tdm_rainfall',
        'bin/tdm_wrf_configurator',
        'bin/tdm_grib2cf',
    ],
    cmdclass={'build': Build},
)

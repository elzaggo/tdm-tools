#!/usr/bin/env python

from netCDF4 import Dataset
import argparse
import datetime
import imageio
import os
import subprocess
import sys

import numpy as np

from tdm.radar import utils


strptime = datetime.datetime.strptime
strftime = datetime.datetime.strftime


# For a double check, here we use the old versions of get_image_data and
# estimate_rainfall (no masked arrays). Note that the mask used here is
# negated w.r.t that of the new version.

def get_image_data(path):
    im = imageio.imread(path)
    return im[:, :, 0], im[:, :, 3] == 255  # signal, mask


def estimate_rainfall(signal, mask):
    Z = 10**(0.1*(0.39216 * signal - 8.6))
    return (Z/300)**(1/1.5) * mask


def run_gdaltransform(s_srs, t_srs, x, y):
    args = ["gdaltransform", "-s_srs", s_srs, "-t_srs", t_srs, "-output_xy"]
    out = subprocess.check_output(args, input=b"%f %f\n" % (x, y))
    lon, lat = [float(_) for _ in out.strip().split(b" ")]
    return lat, lon


def check_time_unit(t):
    fmt = "%Y-%m-%d %H:%M:%S"
    parts = t.getncattr("units").strip().split(" ", 2)
    assert len(parts) == 3
    assert parts[:2] == ["seconds", "since"]
    return strptime(parts[2], fmt)


def check_geo(dataset, footprint):
    ga = utils.GeoAdapter(footprint)
    xpos, ypos = dataset.variables["x"], dataset.variables["y"]
    xpos.set_auto_mask(False)
    ypos.set_auto_mask(False)
    assert (xpos.size, ypos.size) == (ga.cols, ga.rows)
    assert np.allclose(xpos[:], ga.xpos())
    assert np.allclose(ypos[:], ga.ypos())
    lat, lon = dataset.variables["lat"], dataset.variables["lon"]
    s_srs = "%s:%s" % (ga.sr.GetAttrValue("AUTHORITY", 0),
                       ga.sr.GetAttrValue("AUTHORITY", 1))
    t_srs = "EPSG:4326"
    rows = np.sort(np.random.choice(np.arange(ypos.size), 10, replace=False))
    cols = np.sort(np.random.choice(np.arange(xpos.size), 10, replace=False))
    for i in rows:
        for j in cols:
            y, x = ypos[i], xpos[j]
            exp_lat, exp_lon = run_gdaltransform(s_srs, t_srs, x, y)
            assert abs(lat[i, j] - exp_lat) < 1e-4
            assert abs(lon[i, j] - exp_lon) < 1e-4


def check_time(dataset, dts):
    t = dataset.variables["time"]
    t.set_auto_mask(False)
    assert t.size == len(dts)
    start = check_time_unit(t)
    for i, dt in enumerate(dts):
        assert dt == start + datetime.timedelta(seconds=t[i].item())


def check_rainfall_rate(dataset, dts, img_dir):
    rr = dataset.variables["rainfall_rate"]
    for i, dt in enumerate(dts):
        name = "%s.png" % strftime(dt, "%Y-%m-%d_%H:%M:%S")
        signal, mask = get_image_data(os.path.join(img_dir, name))
        rainfall = estimate_rainfall(signal, mask)
        assert np.ma.allclose(rr[i], rainfall, atol=1e-4)


def check(nc_path, img_dir, footprint):
    dts, paths = zip(*utils.get_images(img_dir))
    ds = Dataset(nc_path, "r")
    check_geo(ds, footprint)
    check_time(ds, dts)
    check_rainfall_rate(ds, dts, img_dir)


def main(args):
    nc_paths = [os.path.join(args.nc_dir, _) for _ in os.listdir(args.nc_dir)]
    print("found %d files" % len(nc_paths))
    print("checking:")
    for p in nc_paths:
        print(" ", p)
        check(p, args.img_dir, args.footprint)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("nc_dir", metavar="NETCDF_DIR")
    parser.add_argument("img_dir", metavar="PNG_IMG_DIR")
    parser.add_argument("footprint", metavar="GEOTIFF_FOOTPRINT")
    main(parser.parse_args(sys.argv[1:]))
